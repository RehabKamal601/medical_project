
python manage.py inspectdb
```

1. **جدول المستخدم (ApiUser)**:
   - id (المفتاح الرئيسي)
   - username (اسم المستخدم - فريد)
   - email (البريد الإلكتروني - فريد)
   - password (كلمة المرور)
   - first_name (الاسم الأول)
   - last_name (الاسم الأخير)
   - role (الدور: طبيب/مريض/مشرف)
   - phone (رقم الهاتف)
   - is_active (نشط/غير نشط)
   - date_joined (تاريخ التسجيل)

2. **جدول الطبيب (ApiDoctorprofile)**:
   - id (المفتاح الرئيسي)
   - user (علاقة مع جدول المستخدم)
   - specialization (التخصص)
   - experience_years (سنوات الخبرة)
   - bio (نبذة عن الطبيب)
   - image (صورة الطبيب)
   - created_at (تاريخ الإنشاء)
   - updated_at (تاريخ التحديث)

3. **جدول المريض (ApiPatientprofile)**:
   - id (المفتاح الرئيسي)
   - user (علاقة مع جدول المستخدم)
   - age (العمر)
   - gender (الجنس)
   - address (العنوان)
   - medical_history (التاريخ الطبي)
   - created_at (تاريخ الإنشاء)
   - updated_at (تاريخ التحديث)

4. **جدول المواعيد (ApiAppointment)**:
   - id (المفتاح الرئيسي)
   - doctor (علاقة مع جدول الطبيب)
   - patient (علاقة مع جدول المريض)
   - date (تاريخ الموعد)
   - time (وقت الموعد)
   - status (حالة الموعد)
   - note (ملاحظات)
   - created_at (تاريخ الإنشاء)
   - updated_at (تاريخ التحديث)

5. **جدول المواعيد المتاحة (ApiSchedule)**:
   - id (المفتاح الرئيسي)
   - doctor (علاقة مع جدول الطبيب)
   - day_of_week (يوم الأسبوع)
   - start_time (وقت البداية)
   - end_time (وقت النهاية)

6. **جدول الإشعارات (ApiNotification)**:
   - id (المفتاح الرئيسي)
   - user (علاقة مع جدول المستخدم)
   - message (نص الإشعار)
   - created_at (تاريخ الإنشاء)
   - is_read (مقروء/غير مقروء)










Great! The URLs are already set up correctly since we're using DRF's ViewSets and routers. Our new endpoints will be automatically available at:
GET/POST /api/doctor/{doctor_id}/availability/ - Manage availability schedule
GET /api/doctor/{doctor_id}/appointments/ - View all appointments
GET /api/doctor/{doctor_id}/upcoming_appointments/ - View upcoming appointments
GET /api/doctor/{doctor_id}/past_appointments/ - View past appointments
POST /api/doctor/{doctor_id}/update_appointment_status/ - Update appointment status and add notes
Now let's make sure our serializers are properly set up. Let's check the current doctor serializers:
The serializers look good! They already handle all the functionality we need. Let me summarize what we've implemented:
Doctor Availability Management:
GET /api/doctor/{doctor_id}/availability/ - View current availability schedule
POST /api/doctor/{doctor_id}/availability/ - Set/update availability schedule
The schedule includes days of the week, start time, end time, and availability status
Appointment Management:
GET /api/doctor/{doctor_id}/appointments/ - View all appointments with filtering options
GET /api/doctor/{doctor_id}/upcoming_appointments/ - View future appointments
GET /api/doctor/{doctor_id}/past_appointments/ - View past appointments
POST /api/doctor/{doctor_id}/update_appointment_status/ - Update appointment status (accept/reject) and add notes
Profile Management:
GET /api/doctor/{doctor_id}/ - View detailed profile (using DoctorDetailSerializer)
PUT /api/doctor/{doctor_id}/ - Update profile information
Profile includes: specialty, bio, contact info, experience, rating, etc.
